{"version":3,"sources":["components/Point.js","components/Goal.js","containers/Place.js","components/Panel.js","containers/Control.js","actions/index.js","components/ResultList.js","containers/History.js","App.js","serviceWorker.js","reducers/index.js","store/config.js","index.js"],"names":["Point","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","coordination","t","res","left","Math","cos","top","sin","_isMounted","setState","context","currentTime","Date","now","setInterval","drawPosition","drawing","index","react_default","a","createElement","className","style","Component","Goal","points","map","item","Point_Point","key","id","listPoints","connect","store","count","length","dispatch","Panel","setHistory","tmp","elements","document","getElementById","querySelectorAll","history","i","params","getBoundingClientRect","parseFloat","x","y","handleClick","event","preventDefault","add","addHistory","handleClear","clear","floor","random","toString","type","value","onClick","list","payload","addPoints","clearPoints","ResultList","renderList","assertThisInitialized","result","current","lastPoint","mergeCircle","splice","indexOf","removeDuplicateFromArray","x0","y0","d","h","first","second","x10","x20","y10","y20","sqrt","pow","abs","r1","Arr","Cur","j","App","Place","Control","History","Boolean","window","location","hostname","match","initialState","createStore","arguments","undefined","action","objectSpread","ReactDOM","render","es","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ade4cd58.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Point extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            coordination: {}\r\n        };\r\n    }\r\n\r\n    drawPosition(t) {\r\n        const radius = 255;\r\n        const alpha = 2 * 3.14;\r\n\r\n        let res = {};\r\n        let left = 230 + radius * Math.cos(alpha * t);\r\n        let top = 235 + radius * Math.sin(-alpha * t);\r\n\r\n        res = { left: left, top: top };\r\n\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                coordination: res\r\n            });\r\n        }\r\n    }\r\n\r\n    drawing() {\r\n        let context = this;\r\n        const speed = 1;\r\n        const currentTime = Date.now();\r\n\r\n        setInterval(function() {\r\n            let t = Date.now() - currentTime;\r\n            context.drawPosition(t);\r\n        }, speed);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n\r\n        this.drawing();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    render() {\r\n        const { coordination } = this.state;\r\n        const { index } = this.props;\r\n        return (\r\n            <div className=\"css\" style={coordination}>\r\n                {index + 1}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Point from \"./Point\";\r\n\r\nexport default class Goal extends Component {\r\n    listPoints() {\r\n        const { points } = this.props;\r\n\r\n        return points.map((item, index) => {\r\n            return (\r\n                <Point key={index} index={index} className=\"css\" style={item} />\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id=\"round\">{this.listPoints()}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { connect } from \"react-redux\";\r\nimport Goal from \"../components/Goal\";\r\n\r\nconst mapStatToProps = store => {\r\n    return {\r\n        points: store.points,\r\n        count: store.points.length\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {};\r\n};\r\n\r\nexport default connect(\r\n    mapStatToProps,\r\n    mapDispatchToProps\r\n)(Goal);\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Panel extends Component {\r\n    setHistory = tmp => {\r\n        // собираем текущие координаты\r\n        let elementRound = document.getElementById(\"round\");\r\n        let elements = elementRound.querySelectorAll(\".css\");\r\n        let history = [];\r\n        for (var i = 0; i < elements.length; i++) {\r\n            let params = elements[i].getBoundingClientRect();\r\n            history[i] = {\r\n                left: parseFloat(params.x),\r\n                top: parseFloat(params.y)\r\n            };\r\n        }\r\n        history[elements.length] = { left: 937.5, top: 580 };\r\n        return history;\r\n    };\r\n    randomColors() {\r\n        return \"#\" + Math.floor(Math.random() * 16777215).toString(16);\r\n    }\r\n    handleClick = event => {\r\n        event.preventDefault();\r\n        let tmp = { left: 230, top: 475 };\r\n\r\n        const { points } = this.props;\r\n        if (points.length < 20) {\r\n            points[points.length] = tmp;\r\n\r\n            this.props.add(points);\r\n            this.props.addHistory(this.setHistory(tmp));\r\n        }\r\n    };\r\n\r\n    handleClear = event => {\r\n        event.preventDefault();\r\n        this.props.clear([{ left: 230, top: 475 }]);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"panel\">\r\n                <input type=\"button\" value=\"Add\" onClick={this.handleClick} />{\" \"}\r\n                &nbsp;\r\n                <input type=\"button\" value=\"Clear\" onClick={this.handleClear} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { connect } from \"react-redux\";\r\nimport Panel from \"../components/Panel\";\r\nimport { addPoints, clearPoints, addHistory } from \"../actions/index\";\r\n\r\nconst mapStatToProps = store => {\r\n    return {\r\n        points: store.points\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        add: list => dispatch(addPoints(list)),\r\n        clear: list => dispatch(clearPoints(list)),\r\n        addHistory: list => dispatch(addHistory(list))\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStatToProps,\r\n    mapDispatchToProps\r\n)(Panel);\r\n","export function addPoints(list) {\r\n    return {\r\n        type: \"NEW_POINTS\",\r\n        payload: list\r\n    };\r\n}\r\n\r\nexport function clearPoints(list) {\r\n    return {\r\n        type: \"CLEAR_POINTS\",\r\n        payload: list\r\n    };\r\n}\r\n\r\nexport function addHistory(list) {\r\n    return {\r\n        type: \"ADD_HISTORY\",\r\n        payload: list\r\n    };\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class ResultList extends Component {\r\n    mergeCircle(lastPoint, item) {\r\n        let x0 = 0;\r\n        let y0 = 0; //координаты точки пересечения всех линий\r\n\r\n        let d = 0; //расстояние между центрами окружностей\r\n        let a = 0; //расстояние от r1 до точки пересечения всех линий\r\n        let h = 0; //расстояние от точки пересеч окружностей до точки пересеч всех линий\r\n        let first = {};\r\n        let second = {};\r\n        let x10 = lastPoint.left;\r\n        let x20 = item.left;\r\n        let r1 = 15;\r\n        let y10 = lastPoint.top;\r\n        let y20 = item.top;\r\n        let r2 = 15;\r\n\r\n        d = Math.sqrt(\r\n            Math.pow(Math.abs(x10 - x20), 2) + Math.pow(Math.abs(y10 - y20), 2)\r\n        );\r\n        //console.info(lastPoint);\r\n        //console.info(item);\r\n        //console.info(d);\r\n        //console.info(\"--------------\");\r\n\r\n        if (d > r1 + r2) return false; //окружности не пересекаются\r\n\r\n        a = (r1 * r1 - r2 * r2 + d * d) / (2 * d);\r\n        h = Math.sqrt(Math.pow(r1, 2) - Math.pow(a, 2));\r\n\r\n        x0 = x10 + (a * (x20 - x10)) / d;\r\n        y0 = y10 + (a * (y20 - y10)) / d;\r\n\r\n        first.x = x0 + (h * (y20 - y10)) / d;\r\n        first.y = y0 - (h * (x20 - x10)) / d;\r\n\r\n        if (a === r1) return true; //окружности соприкасаются\r\n\r\n        second.x = x0 - (h * (y20 - y10)) / d;\r\n        second.y = y0 + (h * (x20 - x10)) / d;\r\n\r\n        return true; //окружности пересекаются\r\n    }\r\n\r\n    removeDuplicateFromArray(Arr) {\r\n        var Cur,\r\n            j,\r\n            i = 0;\r\n        while (i < Arr.length) {\r\n            Cur = Arr[i];\r\n            for (j = i + 1; j < Arr.length; j++) {\r\n                if (Cur == Arr[j]) {\r\n                    Arr.splice(i, 1);\r\n                    i--;\r\n                    break;\r\n                }\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n\r\n    renderList = () => {\r\n        let context = this;\r\n        const { history } = this.props;\r\n        if (typeof history !== \"undefined\") {\r\n            let result = [];\r\n            if (history.length > 1) {\r\n                result = history.map((current, i) => {\r\n                    let lastPoint = current;\r\n                    let res = 2;\r\n\r\n                    res = history.map((item, index) => {\r\n                        if (index !== i) {\r\n                            if (context.mergeCircle(lastPoint, item)) {\r\n                                return 0; // ERROR\r\n                            } else {\r\n                                return 1; // SUCCESS\r\n                            }\r\n                        } else {\r\n                            return 2; // Текущая точка\r\n                        }\r\n                    });\r\n                    res.splice(res.indexOf(2), 1);\r\n\r\n                    context.removeDuplicateFromArray(res);\r\n\r\n                    if (res.length > 1) {\r\n                        res = \"Error\";\r\n                    } else {\r\n                        res = \"Success\";\r\n                    }\r\n\r\n                    return res;\r\n                });\r\n            } else {\r\n                result[0] = \"Success\";\r\n            }\r\n\r\n            return result.map((item, index) => {\r\n                return (\r\n                    <div key={index} index={index} className=\"log\">\r\n                        Point {index + 1}: {item}\r\n                    </div>\r\n                );\r\n            });\r\n        }\r\n    };\r\n    render() {\r\n        return (\r\n            <div id=\"history\">\r\n                <h2>История</h2>\r\n                {this.renderList()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { connect } from \"react-redux\";\r\nimport ResultList from \"../components/ResultList\";\r\n\r\nconst mapStatToProps = store => {\r\n    return {\r\n        history: store.history\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {};\r\n};\r\n\r\nexport default connect(\r\n    mapStatToProps,\r\n    mapDispatchToProps\r\n)(ResultList);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Place from \"./containers/Place\";\nimport Control from \"./containers/Control\";\nimport History from \"./containers/History\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <div className=\"left\">\n                        <Place />\n                    </div>\n                    <div className=\"right\">\n                        <Control />\n                        <History />\n                    </div>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const initialState = {\r\n    points: [{ left: 230, top: 475 }],\r\n    history: []\r\n};\r\n\r\nexport function rootReducers(state = initialState, action) {\r\n    switch (action.type) {\r\n        case \"NEW_POINTS\":\r\n            return {\r\n                ...state,\r\n                points: action.payload\r\n            };\r\n        case \"CLEAR_POINTS\":\r\n            return {\r\n                ...state,\r\n                points: action.payload,\r\n                history: []\r\n            };\r\n        case \"ADD_HISTORY\":\r\n            return {\r\n                ...state,\r\n                history: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { createStore } from \"redux\";\r\nimport { initialState, rootReducers } from \"../reducers\";\r\n\r\nexport const store = createStore(rootReducers, initialState);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./store/config\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}